variables:
  GIT_STRATEGY: fetch               # we disable fetch, clone or checkout for every job
  GIT_CHECKOUT: "true"              # as we only want to checkout and fetch in the preperation stage
  GIT_SUBMODULE_STRATEGY: recursive    # same as submodules
#  CI_PROJECT_DIR: C:/Users/acub3team/Documents/GitLab-Runner/builds/$CI_COMMIT_REF_SLUG/$CI_PROJECT_NAME

cache:
  key: ${CI_PIPELINE_ID}
  untracked: true
  paths:
    - Binaries/
    - Intermediate/
    - Saved/
    - .vs/
    - HouseOfIgnotus.sln

stages:
  - preperations
  - build-lightmap
  - compile
  - build
  - cook
  - package
  - cleanup

before_script:
  - echo "Updating scripts ..."
  - pushd %SCRIPTS_DIR%
  - git pull
  - popd

start-release:
  stage: preperations
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULED
  cache: {}
  before_script: []
  tags:
    - gce
  variables:
    GIT_STRATEGY: clone
    GIT_CHECKOUT: "false"
    GIT_SUBMODULE_STRATEGY: none
  script:
    - echo "Making a new release for ${CI_PROJECT_NAME} ..."
    - git config --global user.name ${GITLAB_USER_NAME}
    - git config --global user.email ${GITLAB_USER_EMAIL}
    - git checkout -B release
    - git pull origin release
    - git reset --hard ${CI_COMMIT_SHA}       # Use current master where the pipeline triggers
    - git push --no-verify --quiet http://gitlab-ci-token:${GITLAB_ACCESS_TOKEN}@gitlab.com/TeamACube/${CI_PROJECT_NAME}.git release      # Hides the logs to prevent credentials from leaking

end-release:
  stage: cleanup
  when: manual
  allow_failure: false
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULED
  cache: {}
  before_script: []
  tags:
    - gce
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
    GIT_SUBMODULE_STRATEGY: none
  script:
    - echo "The pipeline has been cleaned!"

preparations:
  stage: preperations
  except:
    variables:
      - $SCHEDULED
  tags:
    - ue4
  script:
    - echo "Preparing %CI_PROJECT_NAME% ..."
    - call "%SCRIPTS_DIR%\PrepareProject.bat"
    - echo "Preparing editor files ..."
    - call "%SCRIPTS_DIR%\PrepareEditor.bat"

.build-lightmap:
  stage: build-lightmap
  except:
    variables:
      - $SCHEDULED
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /build-lightmap/
  tags:
    - ue4
  script:
    - echo "Rebuilding Lightmaps ..."
    - call "%SCRIPTS_DIR%\PrebuildLightmaps.bat"

.scheduled-build-lightmap:
  stage: build-lightmap
  except:
    variables:
      - $SCHEDULED
  only:
    - schedules
  tags:
    - ue4
  script:
    - echo "Rebuilding Lightmaps (Scheduled)..."
    - call "%SCRIPTS_DIR%\PrebuildLightmaps.bat"

compile:
  stage: compile
  except:
    variables:
      - $SCHEDULED
  tags:
    - ue4
  script:
    - echo "Compiling Scripts for %CI_PROJECT_NAME% ..."
    - call "%SCRIPTS_DIR%\CompileScripts.bat"

build:
  stage: build
  except:
    variables:
      - $SCHEDULED
  tags:
    - ue4
  script:
    - echo "Building %CI_PROJECT_NAME% ..."
    - call "%SCRIPTS_DIR%\BuildProject.bat"

cook:
  stage: cook
  except:
    variables:
      - $SCHEDULED
  tags:
    - ue4
  script:
    - echo "Cooking %CI_PROJECT_NAME% ..."
    - call "%SCRIPTS_DIR%\CookProject.bat"

.lightmaps:
  stage: package
  except:
    variables:
      - $SCHEDULED
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /build-lightmap/
  tags:
    - ue4
  script:
    - echo "Adding lightmaps to the artifacts ..."
    - call "%SCRIPTS_DIR%\ArchiveLightmaps.bat"
  artifacts:
    name: "%CI_PROJECT_NAME%-%CI_COMMIT_REF_NAME%-Lightmaps"
    paths:
      - Artifacts/*-Lightmaps.zip
    expire_in: 7d

.scheduled-lightmaps:
  stage: package
  except:
    variables:
      - $SCHEDULED
  only:
    - schedules
  tags:
    - ue4
  script:
    - echo "Adding lightmaps to the artifacts (Scheduled)..."
    - call "%SCRIPTS_DIR%\ArchiveLightmaps.bat"
  artifacts:
    name: "%CI_PROJECT_NAME%-%CI_COMMIT_REF_NAME%-Lightmaps"
    paths:
      - Artifacts/*-Lightmaps.zip
    expire_in: 7d

package:
  stage: package
  except:
    variables:
      - $SCHEDULED
  only:
    refs:
      - web                 # only archive when started through the web interface
      - schedules           # only archive when started at a specific schedule
    variables:
      - $PACKAGE
  tags:
    - ue4
  script:
    - echo "Adding build to the artifacts ..."
    - call "%SCRIPTS_DIR%\ArchiveBuild.bat"
  artifacts:
    name: "%CI_PROJECT_NAME%-%CI_COMMIT_REF_NAME%-Build"
    paths:
      - Artifacts/*-Build.zip
    expire_in: 7d

release:
  stage: package
  except:
    variables:
      - $SCHEDULED
  only:
    - release
    - tags                # only archive when a tag is provided
  tags:
    - ue4
  script:
    - echo "Adding release to the artifacts ..."
    - call "%SCRIPTS_DIR%\ArchiveBuild.bat"
  artifacts:
    name: "%CI_PROJECT_NAME%-%CI_COMMIT_REF_NAME%-Build"
    paths:
      - Artifacts/*-Build.zip
    expire_in: 7d

cleanup:
  stage: cleanup
  except:
    variables:
      - $SCHEDULED
  when: always
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
    GIT_SUBMODULE_STRATEGY: none
  cache: {}
  before_script: []
  tags:
    - ue4
  script:
    - echo "Cleaning up ..."
    - echo "%CACHE_PATH%\%CI_PROJECT_NAMESPACE%\%CI_PROJECT_NAME%\%CI_PIPELINE_ID%-%CACHE_APPEND%"
    - rmdir /s /q "%CACHE_PATH%\%CI_PROJECT_NAMESPACE%\%CI_PROJECT_NAME%\%CI_PIPELINE_ID%-%CACHE_APPEND%"